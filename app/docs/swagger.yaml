definitions:
  models.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      success:
        type: boolean
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.User:
    properties:
      active:
        type: boolean
      avatar_id:
        type: string
      created:
        type: string
      email:
        type: string
      id:
        type: integer
      login:
        type: string
      name:
        type: string
      pass:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      surname:
        type: string
      updated:
        type: string
    type: object
  requestData.Activate:
    properties:
      code:
        type: string
      password:
        type: string
    type: object
  requestData.CategoryDelete:
    properties:
      category_id:
        items:
          type: string
        type: array
    type: object
  requestData.CategoryUpdate:
    properties:
      category_id:
        type: string
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  requestData.ChangeEmail:
    properties:
      email:
        type: string
    type: object
  requestData.ChangeEmailComplete:
    properties:
      code:
        type: integer
    type: object
  requestData.ChangePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  requestData.ChangeUser:
    properties:
      email:
        type: string
      id:
        type: integer
      login:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: integer
      surname:
        type: string
    type: object
  requestData.ChangeUserInfo:
    properties:
      login:
        type: string
      name:
        type: string
      phone:
        type: string
      surname:
        type: string
    type: object
  requestData.CheckRecoveryCode:
    properties:
      code:
        type: string
    type: object
  requestData.CreateCategory:
    properties:
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  requestData.Login:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  requestData.RecoverySubmit:
    properties:
      code:
        type: string
      password:
        type: string
    type: object
  requestData.Refresh:
    properties:
      token:
        type: string
    type: object
  requestData.Register:
    properties:
      email:
        type: string
      login:
        type: string
      name:
        type: string
      surname:
        type: string
    type: object
  requestData.RegistrationCode:
    properties:
      code:
        type: string
    type: object
  requestData.Send:
    properties:
      email:
        type: string
    type: object
  requestData.SendMail:
    properties:
      email:
        type: string
    type: object
  requestData.UsersArray:
    properties:
      id:
        items:
          type: integer
        type: array
    type: object
  responses.AuthResponse:
    properties:
      access_token:
        type: string
      alive:
        type: integer
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/responses.UserInfo'
    type: object
  responses.CategoryInfo:
    properties:
      category_id:
        type: string
      created:
        type: string
      creator_id:
        type: integer
      description:
        type: string
      image:
        type: string
      name:
        type: string
      updated:
        type: string
    type: object
  responses.ChangeEmail:
    properties:
      access_token:
        type: string
      messages:
        type: string
      refresh_token:
        type: string
      success:
        type: boolean
    type: object
  responses.CheckRecoveryCode:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
    type: object
  responses.CodeCheck:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
    type: object
  responses.Refresh:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: integer
    type: object
  responses.RegisterResponse:
    properties:
      error:
        type: boolean
      user:
        $ref: '#/definitions/responses.UserInfo'
    type: object
  responses.UserInfo:
    properties:
      avatar_id:
        type: string
      created:
        type: string
      email:
        type: string
      login:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: integer
      surname:
        type: string
      updated:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/categories/create:
    post:
      consumes:
      - application/json
      description: Endpoint to create product category
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Created product category
      tags:
      - Categories
  /admin/categories/delete:
    delete:
      consumes:
      - application/json
      description: Endpoint to delete category
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.CategoryDelete'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - Categories
  /admin/categories/info:
    get:
      consumes:
      - application/json
      description: Endpoint to get information about category by id
      parameters:
      - description: category id
        in: query
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CategoryInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get category info by id
      tags:
      - Categories
  /admin/categories/list:
    get:
      consumes:
      - application/json
      description: Endpoint to get list of categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.CategoryInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get categories list
      tags:
      - Categories
  /admin/categories/update:
    patch:
      consumes:
      - application/json
      description: Endpoint to update category
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.CategoryUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - Categories
  /admin/users/change:
    post:
      consumes:
      - application/json
      description: Endpoint to change user data. Request must be include "id"
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.ChangeUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Change user data
      tags:
      - Admin
  /admin/users/delete:
    delete:
      consumes:
      - application/json
      description: Endpoint to delete user account
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.UsersArray'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete user account
      tags:
      - Admin
  /admin/users/list:
    get:
      consumes:
      - application/json
      description: Endpoint to get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - Admin
  /auth/activate:
    post:
      consumes:
      - application/json
      description: Endpoint to activate account by registration code
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.Activate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Activate account
      tags:
      - Auth
  /auth/activate/send:
    post:
      consumes:
      - application/json
      description: Endpoint to send register email to submit registration
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.Send'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Send register email
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Endpoint to login into account
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login into account
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Endpoint to logout from account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Logout from account
      tags:
      - Auth
  /auth/recovery:
    post:
      consumes:
      - application/json
      description: Endpoint to recovery user account by email
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.SendMail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Recovery user account
      tags:
      - Auth
  /auth/recovery/check:
    post:
      consumes:
      - application/json
      description: Endpoint to check recovery code if exist
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.CheckRecoveryCode'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CheckRecoveryCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Check recovery code if exist
      tags:
      - Auth
  /auth/recovery/submit:
    post:
      consumes:
      - application/json
      description: Endpoint to submit recovery account and create a new password for
        account
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.RecoverySubmit'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Recovery submit
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Endpoint to get a new access token by refresh token
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.Refresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Refresh'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Get new access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Endpoint to register a new user account
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.Register'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Register account
      tags:
      - Auth
  /auth/register/check:
    post:
      consumes:
      - application/json
      description: Endpoint to check registration code if exist
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.RegistrationCode'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CodeCheck'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      summary: Check registration code if exist
      tags:
      - Auth
  /user/avatar/{uuid}:
    get:
      consumes:
      - application/json
      description: Get avatar by uuid
      parameters:
      - description: UUID of the avatar
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get avatar by uuid
      tags:
      - User
  /user/change:
    patch:
      consumes:
      - application/json
      description: Endpoint to change user data
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.ChangeUserInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Change user data
      tags:
      - User
  /user/change/email:
    post:
      consumes:
      - application/json
      description: Endpoint to change user email
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.ChangeEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Change user email
      tags:
      - User
  /user/change/email/submit:
    patch:
      consumes:
      - application/json
      description: Endpoint to complete email change
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.ChangeEmailComplete'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ChangeEmail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Change email complete
      tags:
      - User
  /user/changepass:
    post:
      consumes:
      - application/json
      description: Endpoint to change user password
      parameters:
      - description: request requestData
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/requestData.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Change user password
      tags:
      - User
  /user/info:
    get:
      consumes:
      - application/json
      description: Endpoint to get user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.UserInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get user info
      tags:
      - User
  /user/upload/avatar:
    post:
      consumes:
      - '*/*'
      description: Upload avatar
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Upload avatar
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
